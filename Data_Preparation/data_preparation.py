# -*- coding: utf-8 -*-
"""Data_preparation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10CaV0owN4ES_8qeG8J5yWaHMOV-82dud
"""

#import pandas
import pandas as pd

#reading the csv file

customer_df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/customer_train.csv')

customer_df.head()

#Create a copy of the data frame to transform
customer_df_copy = customer_df.copy()

#identification of nominal, ordinal, and two-factor categories
for col in customer_df.select_dtypes('object').columns:
  print(customer_df_copy[col].value_counts(), '\n')

#create a dictionary of columns containing ordered categorical data
ordered_cols = {
    'enrolled_university':['no_enrollment', 'Part time course', 'Full time course'],
    'education_level':['Primary School', 'High School', 'Graduate', 'Masters', 'Phd'],
    'experience':['<1'] + list(map(str, range(1, 21)))+ ['>20'],
    'company_size':['<10', '10-49', '50-99', '100-499', '500-999', '1000-4999', '5000-9999', '10000+'],
    'last_new_job':['never', '1', '2', '3', '4', '>4']
}

#create a mapping of columns containing two-factor factories to convert to booleans
two_fact_cols = {
    'relevant_experience': {'No relevant experience': False, 'Has relevant experience': True},
    'job_change':{0.0: False, 1.0: True}
}

#loop through DataFrame columns to change the data types

for col in customer_df_copy:

  #convert tow-factor categories to boolean
  if col in ['relevant_experience', 'job_change']:
    customer_df_copy[col] = customer_df_copy[col].map(two_fact_cols[col])

  #convert integer columns to int32
  elif col in ['student_id', 'training_hours']:
    customer_df_copy[col] = customer_df_copy[col].astype('int32')

  #convert float columns to float16
  elif col == 'city_development_index':
    customer_df_copy[col] = customer_df_copy[col].astype('float16')

  #convert columns ordered category data to ordered categories data using dict
  elif col in ordered_cols.keys():
    category = pd.CategoricalDtype(ordered_cols[col], ordered=True)
    customer_df_copy[col] = customer_df_copy[col].astype(category)

  #convert remaining columns to nominal categorical data
  else:
    customer_df_copy[col] = customer_df_copy[col].astype('category')

#filterins students with 10 or more years of experience at companies with at least 1000 employees
customer_df_copy = customer_df_copy[(customer_df_copy['experience'] >= '10')
 & (customer_df_copy['company_size'] >= '1000-4999')]

#Compare the datatype and memory usage of the original and transformed DataFrame
print(customer_df_copy.head())
customer_df_copy.info()

"""**Conclusion:**
- When we change and specify the dtype, we can see the memory usage reduces
"""